(* program *)
program       = { statement } ;

block         = "{" { statement } "}" ;

(* statements *)
statement         = ( simple_statement | compound_statement ) terminator ;
simple_stmt       = return_stmt | break_stmt | continue_stmt | variable_def_stmt | assignment_stmt | expression_stmt ;
compound_stmt     = if_stmt | while_stmt | for_stmt | function_def | play_stmt ;

expression_stmt   = expression ;
variable_def_stmt = "var" assignment_stmt ;
assignment_stmt   = lvalue "=" expression ;
lvalue            = identifier ;
return_stmt       = "return" expression ;
break_stmt        = "break" ;
continue_stmt     = "continue" ;
play_stmt         = "<" { note } ">" ;
array_init        = "[" primitive "]" ;

if_stmt           = "if(" conditional ")" block
                        [ "else" ( block | statement ) ] ;
while_stmt        = "while(" conditional ")" block ;
for_stmt          = "for(" ( terminator | variable_def_stmt | assignment_stmt ) ( terminator | conditional ) ( terminator | assignment_stmt ) ")" block ;

(* expression *)
expression        = array_init | conditional ;
conditional       = or_test ;

or_test           = and_test | or_test "||" and_test ;
and_test          = not_test | and_test "&&" not_test ;
not_test          = comparison | "!" not_test ;

comparison        = addition_expr [ { comparison_operator addition_expr } ] ;
addition_expr     = multiply_expr | addition_expr addition_op addition_expr ;
multiply_expr     = unary_expr | multiply_expr multiply_op multiply_expr ;
unary_expr        = primary | unary_op unary_expr ;
primary           = identifier | primitive | call_stmt ;
new_instance      = "new" identfier "(" argument_list ")" ;
array_access      = identifier "[" ( identifier | integer ) "]" ;

comparison_op     = eq | teq | neq | tneq | sm | smeq | lr | lreq
eq                = "==" ;
teq               = "===" ;
neq               = "!=" ;
tneq              = "!=="
sm                = "<" ;
smeq              = "<=" ;
lr                = ">" ;
lreq              = ">=" ;
addition_op       = "+" | "-" ;
multiply_op       = "*" | "/" ;
unary_operator    = "-" | "+" ;

(* functions *)
call_stmt         = function_call | method_call ;
function_call     = identifier "(" [ argument_list ] ")" ;
method_call       = expression { "." expression } "(" [argument_list ] ")" ;

argument_list     = expression | argument_list "," expression ;
parameter_list    = identifier | parameter_list "," identifier ;

procedure_def     = function_def | method_def ;
function_def      = "function" identifier "(" [ parameter_list ] ")" block ;
method_def        = identifier "." identifier "(" [ parameter_list ] ")" block ;

(* constants )
letter            = lowercase | uppercase
lowercase         = "a" | "b" | ... | "z" ;
uppercase         = "A" | "B" | ... | "Z" ;
zero              = "0" ;
nonzero           = "1" | ... | "9" ;
whitespace        = ? ASCII 32 ? ;

(* primitives *)
identifier        = letter { letter | number }
primitive         = bool | text | number | note
bool              = "true" | "false" ;
text              = '"' { ? any utf8_char except unescaped '"' ? | escape } '"' ;
number            = integer | double ;
integer           = nonzero { digit } | zero ;
double            = [ integer ] fraction ;
fraction          = "," { digit } ;
note              = ( ( "C" | "C#" | "D" | "D#" | "E" | "F" | "F#" | "G" | "G#" | "A" | "A#" | "B" ) [ integer ] | "R" ) [ "w" | "h" | "q" ] ;

(* misc *)
terminator        = ";" ;