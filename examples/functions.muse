// TODO: Return should break

// FUNCTION DECLARATION STATEMENT

// test 1 - function declaration statement, no arguments
function foo() {
    print("test 1 - OK!");
}
//foo();

// test 2 - function declaration statement, with single argument
function bar(foo1) {
    if(foo1 === 2)
        print("test 2 - OK!");
    else
        print("test 2 - FAIL!");
}
//bar(2);

// test 3 - function declaration statement, with arguments
function bar(foo1, foo2) {
    if(foo1 == 2 && foo2 == 3)
        print("test 3 - OK!");
    else
        print("test 3 - FAIL!");
}
//bar(2, 3);

// test 4 - function declaration statement, with return
function buzz() {
    return 1;
}
//var D = buzz();
//if(D == 1)
//    print("test 4 - OK!");
//else
//    print("test 4 - FAIL!");

// FUNCTION DECLARATION EXPRESSION

// test 5 - function declaration expression, no arguments
var foo1 = function() {
    print("test 5 - OK!");
};
//foo1();

// test 6 - function declaration expression, with arguments
var bar1 = function(foo1, foo2) {
    if(foo1 == 2 && foo2 == 3)
        print("test 6 - OK!");
    else
        print("test 6 - FAIL!");
};
//bar1(2, 3);

// test 7 - function declaration expression, with return
var buzz1 = function() {
    return 1; // should return 1
};
//var H = buzz1();
//if(H == 1)
//    print("test 7 - OK!");
//else
//    print("test 7 - FAIL!");

// test 8 - internal function
//print("test 8 - OK!"); // should print "Lorum ipsum!"

// test 9 - return break;
function test9() {
    return 1;
    print("test 9 - FAIL!");
    return 2;
}
//var I = test9();
//if(I == 1)
//    print("test 9 - OK!");
//else
//    print("test 9 - FAIL!");

// test 10 - multiple nested return
function funcC() {
    return 1;
}

function funcB() {
    return funcC() + 1;
}

function funcA() {
    return funcB() + 1;
}

//var J = funcA();
//if(J === 3)
//    print("test 10 - OK!");
//else
//    print("test 10 - FAIL!");

// test 12 - recursive
function recursive(n) {
    print("1: " + n);
    if(n > 10) {
        print("2: " + n);
        return -5;
    }
    if(n > 10) {
        print("This can't run!");
    }
    print("3: " + n);
    return recursive(n + 1);
}
var K = recursive(5);
print("K: " + K);